plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'application'
}

group = 'com.example.demo'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

application {
    mainClassName = 'MapEditor.MapPanel'
}

repositories {
    mavenCentral()
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'com.google.guava:guava:31.1-jre'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

task generateMapFile(type: Copy) {
    def outputDir = project.file('src/main/resources/map')
    outputs.dir(outputDir)

    doLast {
        def content = """
        private static void saveMap(File selectedFile) {
            try {
                PrintWriter writer = new PrintWriter(new FileWriter(selectedFile));
                for (int y = 0; y < 12; y++) {
                    for (int x = 0; x < 21; x++) {
                        writer.print(map[y][x] + " ");
                    }
                    writer.println();
                }
                writer.close();
                System.out.println("Map saved successfully.");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        private static void loadMap(File file) {
            try {
                BufferedReader reader = new BufferedReader(new FileReader(file));
                for (int y = 0; y < 12; y++) {
                    String[] values = reader.readLine().trim().split(" ");
                    for (int x = 0; x < 21; x++) {
                        map[y][x] = Integer.parseInt(values[x]);
                        if (map[y][x] != -1) {
                            buttons[y][x].setIcon(new ImageIcon(palette[currentPage][map[y][x] % PALETTE_SIZE]));
                        } else {
                            buttons[y][x].setIcon(null);
                        }
                    }
                }
                reader.close();
                System.out.println("Map loaded successfully.");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        """

        file("${outputDir}/MapUtils.java").write(content)
    }
}

sourceSets {
    main {
        resources {
            srcDirs = ['src/main/resources']
        }
    }
}

assemble.dependsOn generateMapFile


